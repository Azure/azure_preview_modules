- name: Prepare random number
  set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
  run_once: yes

- name: Various names
  set_fact:
    server_name: "postgresqlsrv{{ rpfx }}"
    second_server_name: "postgresqlsrv{{ rpfx }}2"
    admin_usr: sqladmin
    admin_pwd: Testpasswordxyz12!
  run_once: yes

- name: Create instance of PostgreSQL Server -- check mode
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    sku:
      name: B_Gen5_1
      tier: Basic
    location: eastus
    storage_mb: 51200
    enforce_ssl: True
    admin_username: "{{ admin_usr }}"
    admin_password: "{{ admin_pwd }}"
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    sku:
      name: B_Gen5_1
      tier: Basic
    location: westus2
    storage_mb: 51200
    enforce_ssl: True
    admin_username: "{{ admin_usr }}"
    admin_password: "{{ admin_pwd }}"
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.state == 'Ready'

- name: Create again instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    sku:
      name: B_Gen5_1
      tier: Basic
    location: westus2
    storage_mb: 51200
    enforce_ssl: True
    admin_username: "{{ admin_usr }}"
    admin_password: "{{ admin_pwd }}"
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
      - output.state == 'Ready'

- name: Update instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    sku:
      name: B_Gen5_1
      tier: Basic
    location: westus2
    storage_mb: 52200
    enforce_ssl: False
    admin_username: "{{ admin_usr }}"
    admin_password: "{{ admin_pwd }}"
    tags:
      abc: def
  register: output
- name: Assert the resource was changed
  assert:
    that:
      - output.changed
      - output.state == 'Ready'

- name: Create second instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ second_server_name }}"
    sku:
      name: B_Gen5_1
      tier: Basic
    location: westus2
    storage_mb: 51200
    enforce_ssl: True
    admin_username: "{{ admin_usr }}"
    admin_password: "{{ admin_pwd }}"
    tags:
      aaa: bbb

- name: Create second instance of PostgreSQL Server -- add tags
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ second_server_name }}"
    sku:
      name: B_Gen5_1
      tier: Basic
    location: westus2
    storage_mb: 51200
    enforce_ssl: True
    admin_username: "{{ admin_usr }}"
    admin_password: "{{ admin_pwd }}"
    tags:
      ccc: ddd

- name: Gather facts PostgreSQL Server
  azure_rm_postgresqlserver_facts:
    resource_group: "{{ resource_group }}"
    name: "{{ second_server_name }}"
  register: output 

- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers[0]['id'] != None
      - output.servers[0]['name'] != None
      - output.servers[0]['location'] != None
      - output.servers[0]['sku']['name'] != None
      - output.servers[0]['sku']['tier'] != None
      - output.servers[0]['sku']['capacity'] != None
      - output.servers[0]['version'] != None
      - output.servers[0]['user_visible_state'] != None
      - output.servers[0]['fully_qualified_domain_name'] != None
      - output.servers[0]['tags']['aaa'] == 'bbb'
      - output.servers[0]['tags']['ccc'] == 'ddd'

- name: Gather facts PostgreSQL Server
  azure_rm_postgresqlserver_facts:
    resource_group: "{{ resource_group }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.servers[0]['id'] != None
      - output.servers[0]['name'] != None
      - output.servers[0]['location'] != None
      - output.servers[0]['sku']['name'] != None
      - output.servers[0]['sku']['tier'] != None
      - output.servers[0]['sku']['capacity'] != None
      - output.servers[0]['version'] != None
      - output.servers[0]['user_visible_state'] != None
      - output.servers[0]['fully_qualified_domain_name'] != None
      - output.servers[1]['id'] != None
      - output.servers[1]['name'] != None
      - output.servers[1]['location'] != None
      - output.servers[1]['sku']['name'] != None
      - output.servers[1]['sku']['tier'] != None
      - output.servers[1]['sku']['capacity'] != None
      - output.servers[1]['version'] != None
      - output.servers[1]['user_visible_state'] != None
      - output.servers[1]['fully_qualified_domain_name'] != None


#
# azure_rm_postgresqldatabase tests below
#
- name: Create instance of PostgreSQL Database -- check mode
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of PostgreSQL Database
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.name == 'testdatabase'

- name: Create again instance of PostgreSQL Database
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
      - output.name == 'testdatabase'

- name: Create second instance of PostgreSQL Database
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase2

- name: Gather facts PostgreSQL Database
  azure_rm_postgresqldatabase_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
  register: output 

- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.databases[0]['server_name'] != None
      - output.databases[0]['name'] != None
      - output.databases[0]['charset'] != None
      - output.databases[0]['collation'] != None

- name: Gather facts PostgreSQL Database
  azure_rm_postgresqldatabase_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.databases[0]['server_name'] != None
      - output.databases[0]['name'] != None
      - output.databases[0]['charset'] != None
      - output.databases[0]['collation'] != None
      - output.databases[1]['server_name'] != None
      - output.databases[1]['name'] != None
      - output.databases[1]['charset'] != None
      - output.databases[1]['collation'] != None

- name: Delete instance of PostgreSQL Database -- check mode
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
    state: absent
  check_mode: yes
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of PostgreSQL Database
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete unexisting instance of PostgreSQL Database
  azure_rm_postgresqldatabase:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: testdatabase
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed == false

#
# azure_rm_postgresqlfirewallrule
#

- name: Create instance of Firewall Rule -- check mode
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of Firewall Rule
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create again instance of Firewall Rule
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false

- name: Create Firewall Rule - second
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}second
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138

- name: Gather facts PostgreSQL Firewall Rule
  azure_rm_postgresqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.rules[0].id != None
      - output.rules[0].server_name != None
      - output.rules[0].name != None
      - output.rules[0].start_ip_address != None
      - output.rules[0].end_ip_address != None
      - "output.rules | length == 1"

- name: Gather facts PostgreSQL Firewall Rule
  azure_rm_postgresqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.rules[0].id != None
      - output.rules[0].server_name != None
      - output.rules[0].name != None
      - output.rules[0].start_ip_address != None
      - output.rules[0].end_ip_address != None
      - output.rules[1].id != None
      - output.rules[1].name != None
      - output.rules[1].start_ip_address != None
      - output.rules[1].end_ip_address != None
      - "output.rules | length == 2"

- name: Delete instance of Firewall Rule -- check mode
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
    state: absent
  check_mode: yes
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of Firewall Rule
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete unexisting instance of Firewall Rule
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed == false

- name: Delete instance of Firewall Rule - second
  azure_rm_postgresqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}second
    state: absent

- name: Gather facts PostgreSQL Firewall Rule
  azure_rm_postgresqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: firewallrule{{ rpfx }}
  register: output
- name: Assert that empty list was returned
  assert:
    that:
      - output.changed == False
      - "output.rules | length == 0"

#
# configuration
#

- name: Create instance of Configuration -- check mode
  azure_rm_postgresqlconfiguration:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: deadlock_timeout
    value: 2000
    source: user-override
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create instance of Configuration
  azure_rm_postgresqlconfiguration:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: deadlock_timeout
    value: 2000
    source: user-override
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed

- name: Create again instance of Configuration
  azure_rm_postgresqlconfiguration:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    name: deadlock_timeout
    value: 2000
    source: user-override
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false

- name: Gather facts PostgreSQL Configuration
  azure_rm_postgresqlconfiguration_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
    configuration_name: deadlock_timeout
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.configurations.deadlock_timeout.id != None
      - output.configurations.deadlock_timeout.name != None
      - output.configurations.deadlock_timeout.type != None
      - output.configurations.deadlock_timeout.value != None
      - output.configurations.deadlock_timeout.description != None
      - output.configurations.deadlock_timeout.source != None

- name: Gather facts PostgreSQL Configuration
  azure_rm_postgresqlconfiguration_facts:
    resource_group: "{{ resource_group }}"
    server_name: "{{ server_name }}"
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.configurations.deadlock_timeout.id != None
      - output.configurations.deadlock_timeout.name != None
      - output.configurations.deadlock_timeout.type != None
      - output.configurations.deadlock_timeout.value != None
      - output.configurations.deadlock_timeout.description != None
      - output.configurations.deadlock_timeout.source != None

#
# azure_rm_postgresqlserver continuation / clean up
#

- name: Delete instance of PostgreSQL Server -- check mode
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    state: absent
  check_mode: yes
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed

- name: Delete unexisting instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ server_name }}"
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed == false

- name: Delete second instance of PostgreSQL Server
  azure_rm_postgresqlserver:
    resource_group: "{{ resource_group }}"
    name: "{{ second_server_name }}"
    state: absent
  register: output
- name: Assert the state has changed
  assert:
    that:
      - output.changed
