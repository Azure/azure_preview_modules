- name: Prepare random number
  set_fact:
    rpfx: "{{ 1000 | random }}{{ resource_group | hash('md5') | truncate(7, True, '') }}"
  run_once: yes

- name: Create MySQL Server
  azure_rm_mysqlserver:
    resource_group: "{{ resource_group }}"
    name: mysqlsrv{{ rpfx }}
    sku:
      name: MYSQLB50
      tier: basic
    location: westus
    version: 5.6
    enforce_ssl: True
    admin_username: zimxyz
    admin_password: Testpasswordxyz12!
- name: Create Firewall Rule
  azure_rm_mysqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
    name: firewallrule{{ rpfx }}
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138
- name: Create Firewall Rule
  azure_rm_mysqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
    name: firewallrule{{ rpfx }}second
    start_ip_address: 172.28.10.136
    end_ip_address: 172.28.10.138

- name: Gather facts MySQL Firewall Rule
  azure_rm_mysqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
    firewall_rule_name: firewallrule{{ rpfx }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.firewall_rules.firewallrule{{ rpfx }}.id != None

- name: Gather facts MySQL Firewall Rule
  azure_rm_mysqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
  register: output
- name: Assert that facts are returned
  assert:
    that:
      - output.changed == False
      - output.firewall_rules.firewallrule{{ rpfx }}.id != None
      - output.firewall_rules.firewallrule{{ rpfx }}second.id != None

- name: Delete instance of Firewall Rule
  azure_rm_mysqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
    name: firewallrule{{ rpfx }}
    state: absent
- name: Delete instance of Firewall Rule
  azure_rm_mysqlfirewallrule:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
    name: firewallrule{{ rpfx }}second
    state: absent

- name: Gather facts MySQL Firewall Rule
  azure_rm_mysqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
    firewall_rule_name: firewallrule{{ rpfx }}
  register: output
- name: Assert that empty dictionary was returned
  assert:
    that:
      - output.changed == False
      - "'firewallrule{{ rpfx }}' not in output.firewall_rules"
      - "'firewallrule{{ rpfx }}second' not in output.firewall_rules"

- name: Gather facts MySQL Firewall Rule
  azure_rm_mysqlfirewallrule_facts:
    resource_group: "{{ resource_group }}"
    server_name: mysqlsrv{{ rpfx }}
  register: output
- name: Assert that empty dictionary was returned
  assert:
    that:
      - output.changed == False
      - "'firewallrule{{ rpfx }}' not in output.firewall_rules"
      - "'firewallrule{{ rpfx }}second' not in output.firewall_rules"

- name: Delete instance of MySQL Server
  azure_rm_mysqlserver:
    resource_group: "{{ resource_group }}"
    name: mysqlsrv{{ rpfx }}
    state: absent
- name: Delete instance of MySQL Server
  azure_rm_mysqlserver:
    resource_group: "{{ resource_group }}"
    name: mysqlsrv{{ rpfx }}
    state: absent
